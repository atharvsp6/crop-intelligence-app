#!/usr/bin/env python3
"""
Test script for Indian market data integration
"""
import os
import sys
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def test_indian_market_data():
    """Test Indian market data sources"""
    try:
        from market_data_service import market_data_service
        print("‚úì Market data service imported successfully")
        
        # Test Indian commodity prices
        print("\n--- Testing Indian Real-Time Prices ---")
        indian_commodities = ['wheat', 'rice', 'corn', 'soybean', 'cotton', 'turmeric', 'mustard']
        
        for commodity in indian_commodities:
            price_data = market_data_service.get_real_time_price(commodity, 'IN')
            if price_data:
                currency = price_data.get('currency', 'INR')
                exchange = price_data.get('exchange', 'Unknown')
                market = price_data.get('market', 'Indian')
                print(f"‚úì {commodity.title()}: ‚Çπ{price_data['price']:.2f}/{currency.lower()} "
                      f"from {price_data['source']} ({exchange} - {market})")
                if price_data.get('change_percent'):
                    change_symbol = "+" if price_data['change_percent'] >= 0 else ""
                    print(f"   24h Change: {change_symbol}{price_data['change_percent']:.2f}%")
            else:
                print(f"‚ö† {commodity.title()}: Price data unavailable")
        
        # Test Indian production costs
        print("\n--- Testing Indian Production Costs ---")
        for commodity in ['wheat', 'rice', 'cotton', 'turmeric']:
            costs = market_data_service.get_production_costs(commodity, 'IN', 2.5)  # 2.5 acres test
            if costs and costs['success']:
                total_inr = costs['total_cost_per_acre'] * 2.5
                print(f"‚úì {commodity.title()}: ‚Çπ{costs['total_cost_per_acre']:.0f}/acre "
                      f"(‚Çπ{total_inr:.0f} for 2.5 acres)")
                print(f"   Top costs: Labor ‚Çπ{costs['costs_per_acre'].get('labor', 0):.0f}, "
                      f"Land Rent ‚Çπ{costs['costs_per_acre'].get('land_rent', 0):.0f}")
            else:
                print(f"‚ö† {commodity.title()}: Cost data unavailable")
        
        return True
    except Exception as e:
        print(f"‚úó Indian market data error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_indian_financial_analyzer():
    """Test Indian financial analyzer"""
    try:
        from financial_analyzer import financial_analyzer
        print("\n--- Testing Indian Financial Analyzer ---")
        
        # Test ROI calculation for Indian crops
        test_scenarios = [
            {'crop': 'wheat', 'acres': 5, 'yield_kg_per_acre': 2800, 'description': '5 acres wheat farm'},
            {'crop': 'rice', 'acres': 3, 'yield_kg_per_acre': 3500, 'description': '3 acres rice paddy'},
            {'crop': 'cotton', 'acres': 10, 'yield_kg_per_acre': 550, 'description': '10 acres cotton farm'},
            {'crop': 'turmeric', 'acres': 1, 'yield_kg_per_acre': 4500, 'description': '1 acre turmeric (high value)'}
        ]
        
        for scenario in test_scenarios:
            roi_result = financial_analyzer.calculate_roi(
                scenario['crop'], 
                scenario['acres'], 
                scenario['yield_kg_per_acre'],
                region='IN'
            )
            
            if roi_result.get('success'):
                metrics = roi_result['financial_metrics']
                market_info = roi_result['market_info']
                
                print(f"\n‚úì {scenario['description']}:")
                print(f"   Investment: ‚Çπ{metrics['total_investment']:.0f}")
                print(f"   Revenue: ‚Çπ{metrics['total_revenue']:.0f}")
                print(f"   ROI: {metrics['roi_percentage']:.1f}%")
                print(f"   Price: ‚Çπ{market_info['current_price_per_kg']:.2f}/kg "
                      f"from {market_info['price_source']}")
                if market_info.get('exchange'):
                    print(f"   Exchange: {market_info['exchange']} ({market_info.get('market', 'Indian Market')})")
                
                # Show risk assessment
                risk = roi_result.get('risk_assessment', {})
                if isinstance(risk, dict):
                    print(f"   Risk Level: {risk.get('overall_risk', 'unknown').upper()}")
                
            else:
                print(f"‚úó {scenario['description']}: {roi_result.get('error', 'Failed')}")
        
        # Test market trends for Indian crops
        print("\n--- Testing Indian Market Trends ---")
        trends = financial_analyzer.get_market_trends()
        
        if trends.get('success'):
            print("‚úì Market trends retrieved successfully")
            
            # Show market summary
            if trends.get('market_summary'):
                summary = trends['market_summary']
                print(f"   Market Sentiment: {summary.get('market_sentiment', 'Unknown')}")
                print(f"   Upward Trending: {summary.get('upward_trending', 0)}/{summary.get('total_commodities_tracked', 0)} commodities")
                if summary.get('best_performer'):
                    print(f"   Best Performer: {summary['best_performer'].title()}")
            
            # Show individual crop trends
            market_trends = trends.get('market_trends', {})
            for crop, data in list(market_trends.items())[:3]:  # Show first 3 crops
                price = data.get('current_price', 0)
                source = data.get('data_source', 'unknown')
                trend = data.get('trend_direction', 'stable')
                print(f"   {crop.title()}: ‚Çπ{price:.2f}/kg, {trend} trend ({source})")
                
        else:
            print(f"‚úó Market trends failed: {trends.get('error', 'Unknown error')}")
        
        return True
    except Exception as e:
        print(f"‚úó Indian financial analyzer error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_currency_and_units():
    """Test that Indian pricing uses correct currency and units"""
    print("\n--- Testing Currency and Units ---")
    
    try:
        from market_data_service import market_data_service
        
        # Test that Indian prices return INR
        wheat_price_in = market_data_service.get_real_time_price('wheat', 'IN')
        wheat_price_us = market_data_service.get_real_time_price('wheat', 'US')
        
        if wheat_price_in:
            currency_in = wheat_price_in.get('currency', 'Unknown')
            print(f"‚úì Indian wheat price: {wheat_price_in['price']:.2f} {currency_in}")
            
        if wheat_price_us:
            currency_us = wheat_price_us.get('currency', 'Unknown')
            print(f"‚úì US wheat price: {wheat_price_us['price']:.2f} {currency_us}")
        
        # Test production costs currency
        costs_in = market_data_service.get_production_costs('wheat', 'IN', 1)
        if costs_in and costs_in['success']:
            print(f"‚úì Indian production costs: ‚Çπ{costs_in['total_cost_per_acre']:.0f}/acre")
            
        print("‚úì Currency handling appears correct")
        return True
        
    except Exception as e:
        print(f"‚úó Currency testing error: {e}")
        return False

def main():
    """Main test function for Indian market integration"""
    print("="*60)
    print("INDIAN MARKET DATA INTEGRATION TEST")
    print("="*60)
    
    # Load environment variables
    from dotenv import load_dotenv
    load_dotenv()
    
    # Run tests
    market_data_ok = test_indian_market_data()
    financial_analyzer_ok = test_indian_financial_analyzer()
    currency_ok = test_currency_and_units()
    
    print("\n" + "="*60)
    print("INDIAN MARKET INTEGRATION SUMMARY")
    print("="*60)
    
    if market_data_ok and financial_analyzer_ok and currency_ok:
        print("‚úÖ All Indian market tests passed!")
        print("‚úÖ The app now uses Indian market data with INR pricing.")
        print("‚úÖ Indian commodity exchanges (NCDEX, MCX) are integrated.")
        print("‚úÖ Indian agricultural costs are included.")
        print("\nSupported Indian Commodities:")
        print("   ‚Ä¢ Wheat, Rice, Corn (Maize), Soybean, Cotton")
        print("   ‚Ä¢ Turmeric, Mustard, Cardamom, Coriander")
        print("\nData Sources:")
        print("   ‚Ä¢ NCDEX (National Commodity & Derivatives Exchange)")
        print("   ‚Ä¢ MCX (Multi Commodity Exchange)")
        print("   ‚Ä¢ AgMarketNet (Government Mandi Prices)")
        print("   ‚Ä¢ Ministry of Agriculture MSP (Minimum Support Prices)")
        print("   ‚Ä¢ Realistic Indian production costs per acre")
        
    else:
        print("‚ùå Some Indian market tests failed. Check the errors above.")
        return 1
    
    print("\nüìç Region Settings:")
    print("   ‚Ä¢ Default region: IN (India)")
    print("   ‚Ä¢ Default currency: INR (Indian Rupees)")  
    print("   ‚Ä¢ Price unit: per kg")
    print("   ‚Ä¢ Area unit: acres")
    print("   ‚Ä¢ API endpoints prioritize Indian market data")
    
    return 0

if __name__ == '__main__':
    sys.exit(main())